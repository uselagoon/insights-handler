// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package lagoonclient

import (
	"context"

	"github.com/Khan/genqlient/graphql"
)

type AddFactInput struct {
	Id          int      `json:"id"`
	Environment int      `json:"environment"`
	Name        string   `json:"name"`
	Value       string   `json:"value"`
	Source      string   `json:"source"`
	Description string   `json:"description"`
	KeyFact     bool     `json:"keyFact"`
	Type        FactType `json:"type"`
	Category    string   `json:"category"`
	Service     string   `json:"service"`
}

// GetId returns AddFactInput.Id, and is useful for accessing the field via an interface.
func (v *AddFactInput) GetId() int { return v.Id }

// GetEnvironment returns AddFactInput.Environment, and is useful for accessing the field via an interface.
func (v *AddFactInput) GetEnvironment() int { return v.Environment }

// GetName returns AddFactInput.Name, and is useful for accessing the field via an interface.
func (v *AddFactInput) GetName() string { return v.Name }

// GetValue returns AddFactInput.Value, and is useful for accessing the field via an interface.
func (v *AddFactInput) GetValue() string { return v.Value }

// GetSource returns AddFactInput.Source, and is useful for accessing the field via an interface.
func (v *AddFactInput) GetSource() string { return v.Source }

// GetDescription returns AddFactInput.Description, and is useful for accessing the field via an interface.
func (v *AddFactInput) GetDescription() string { return v.Description }

// GetKeyFact returns AddFactInput.KeyFact, and is useful for accessing the field via an interface.
func (v *AddFactInput) GetKeyFact() bool { return v.KeyFact }

// GetType returns AddFactInput.Type, and is useful for accessing the field via an interface.
func (v *AddFactInput) GetType() FactType { return v.Type }

// GetCategory returns AddFactInput.Category, and is useful for accessing the field via an interface.
func (v *AddFactInput) GetCategory() string { return v.Category }

// GetService returns AddFactInput.Service, and is useful for accessing the field via an interface.
func (v *AddFactInput) GetService() string { return v.Service }

type FactType string

const (
	FactTypeText   FactType = "TEXT"
	FactTypeUrl    FactType = "URL"
	FactTypeSemver FactType = "SEMVER"
)

var AllFactType = []FactType{
	FactTypeText,
	FactTypeUrl,
	FactTypeSemver,
}

type ProblemSeverityRating string

const (
	ProblemSeverityRatingNone       ProblemSeverityRating = "NONE"
	ProblemSeverityRatingUnknown    ProblemSeverityRating = "UNKNOWN"
	ProblemSeverityRatingNegligible ProblemSeverityRating = "NEGLIGIBLE"
	ProblemSeverityRatingLow        ProblemSeverityRating = "LOW"
	ProblemSeverityRatingMedium     ProblemSeverityRating = "MEDIUM"
	ProblemSeverityRatingHigh       ProblemSeverityRating = "HIGH"
	ProblemSeverityRatingCritical   ProblemSeverityRating = "CRITICAL"
)

var AllProblemSeverityRating = []ProblemSeverityRating{
	ProblemSeverityRatingNone,
	ProblemSeverityRatingUnknown,
	ProblemSeverityRatingNegligible,
	ProblemSeverityRatingLow,
	ProblemSeverityRatingMedium,
	ProblemSeverityRatingHigh,
	ProblemSeverityRatingCritical,
}

// __addFactsInput is used internally by genqlient
type __addFactsInput struct {
	Facts []AddFactInput `json:"facts"`
}

// GetFacts returns __addFactsInput.Facts, and is useful for accessing the field via an interface.
func (v *__addFactsInput) GetFacts() []AddFactInput { return v.Facts }

// __addProblemInput is used internally by genqlient
type __addProblemInput struct {
	Environment       int                   `json:"environment"`
	Severity          ProblemSeverityRating `json:"severity"`
	SeverityScore     float64               `json:"severityScore"`
	Identifier        string                `json:"identifier"`
	Service           string                `json:"service"`
	Source            string                `json:"source"`
	AssociatedPackage string                `json:"associatedPackage"`
	Description       string                `json:"description"`
	Links             string                `json:"links"`
	Verstion          string                `json:"verstion"`
	FixedVersion      string                `json:"fixedVersion"`
	DataString        string                `json:"dataString"`
}

// GetEnvironment returns __addProblemInput.Environment, and is useful for accessing the field via an interface.
func (v *__addProblemInput) GetEnvironment() int { return v.Environment }

// GetSeverity returns __addProblemInput.Severity, and is useful for accessing the field via an interface.
func (v *__addProblemInput) GetSeverity() ProblemSeverityRating { return v.Severity }

// GetSeverityScore returns __addProblemInput.SeverityScore, and is useful for accessing the field via an interface.
func (v *__addProblemInput) GetSeverityScore() float64 { return v.SeverityScore }

// GetIdentifier returns __addProblemInput.Identifier, and is useful for accessing the field via an interface.
func (v *__addProblemInput) GetIdentifier() string { return v.Identifier }

// GetService returns __addProblemInput.Service, and is useful for accessing the field via an interface.
func (v *__addProblemInput) GetService() string { return v.Service }

// GetSource returns __addProblemInput.Source, and is useful for accessing the field via an interface.
func (v *__addProblemInput) GetSource() string { return v.Source }

// GetAssociatedPackage returns __addProblemInput.AssociatedPackage, and is useful for accessing the field via an interface.
func (v *__addProblemInput) GetAssociatedPackage() string { return v.AssociatedPackage }

// GetDescription returns __addProblemInput.Description, and is useful for accessing the field via an interface.
func (v *__addProblemInput) GetDescription() string { return v.Description }

// GetLinks returns __addProblemInput.Links, and is useful for accessing the field via an interface.
func (v *__addProblemInput) GetLinks() string { return v.Links }

// GetVerstion returns __addProblemInput.Verstion, and is useful for accessing the field via an interface.
func (v *__addProblemInput) GetVerstion() string { return v.Verstion }

// GetFixedVersion returns __addProblemInput.FixedVersion, and is useful for accessing the field via an interface.
func (v *__addProblemInput) GetFixedVersion() string { return v.FixedVersion }

// GetDataString returns __addProblemInput.DataString, and is useful for accessing the field via an interface.
func (v *__addProblemInput) GetDataString() string { return v.DataString }

// __deleteFactsFromSourceInput is used internally by genqlient
type __deleteFactsFromSourceInput struct {
	Environment int    `json:"environment"`
	Source      string `json:"source"`
}

// GetEnvironment returns __deleteFactsFromSourceInput.Environment, and is useful for accessing the field via an interface.
func (v *__deleteFactsFromSourceInput) GetEnvironment() int { return v.Environment }

// GetSource returns __deleteFactsFromSourceInput.Source, and is useful for accessing the field via an interface.
func (v *__deleteFactsFromSourceInput) GetSource() string { return v.Source }

// __deleteProblemsFromSourceInput is used internally by genqlient
type __deleteProblemsFromSourceInput struct {
	Environment int    `json:"environment"`
	Source      string `json:"source"`
	Service     string `json:"service"`
}

// GetEnvironment returns __deleteProblemsFromSourceInput.Environment, and is useful for accessing the field via an interface.
func (v *__deleteProblemsFromSourceInput) GetEnvironment() int { return v.Environment }

// GetSource returns __deleteProblemsFromSourceInput.Source, and is useful for accessing the field via an interface.
func (v *__deleteProblemsFromSourceInput) GetSource() string { return v.Source }

// GetService returns __deleteProblemsFromSourceInput.Service, and is useful for accessing the field via an interface.
func (v *__deleteProblemsFromSourceInput) GetService() string { return v.Service }

// __getEnvironmentByNameInput is used internally by genqlient
type __getEnvironmentByNameInput struct {
	Name    string `json:"name"`
	Project int    `json:"project"`
}

// GetName returns __getEnvironmentByNameInput.Name, and is useful for accessing the field via an interface.
func (v *__getEnvironmentByNameInput) GetName() string { return v.Name }

// GetProject returns __getEnvironmentByNameInput.Project, and is useful for accessing the field via an interface.
func (v *__getEnvironmentByNameInput) GetProject() int { return v.Project }

// __getEnvironmentFromIdInput is used internally by genqlient
type __getEnvironmentFromIdInput struct {
	Environment int `json:"environment"`
}

// GetEnvironment returns __getEnvironmentFromIdInput.Environment, and is useful for accessing the field via an interface.
func (v *__getEnvironmentFromIdInput) GetEnvironment() int { return v.Environment }

// __getProjectByNameInput is used internally by genqlient
type __getProjectByNameInput struct {
	Project string `json:"project"`
}

// GetProject returns __getProjectByNameInput.Project, and is useful for accessing the field via an interface.
func (v *__getProjectByNameInput) GetProject() string { return v.Project }

// addFactsAddFactsFact includes the requested fields of the GraphQL type Fact.
type addFactsAddFactsFact struct {
	Id int `json:"id"`
}

// GetId returns addFactsAddFactsFact.Id, and is useful for accessing the field via an interface.
func (v *addFactsAddFactsFact) GetId() int { return v.Id }

// addFactsResponse is returned by addFacts on success.
type addFactsResponse struct {
	AddFacts []addFactsAddFactsFact `json:"addFacts"`
}

// GetAddFacts returns addFactsResponse.AddFacts, and is useful for accessing the field via an interface.
func (v *addFactsResponse) GetAddFacts() []addFactsAddFactsFact { return v.AddFacts }

// addProblemAddProblem includes the requested fields of the GraphQL type Problem.
type addProblemAddProblem struct {
	Id int `json:"id"`
}

// GetId returns addProblemAddProblem.Id, and is useful for accessing the field via an interface.
func (v *addProblemAddProblem) GetId() int { return v.Id }

// addProblemResponse is returned by addProblem on success.
type addProblemResponse struct {
	AddProblem addProblemAddProblem `json:"addProblem"`
}

// GetAddProblem returns addProblemResponse.AddProblem, and is useful for accessing the field via an interface.
func (v *addProblemResponse) GetAddProblem() addProblemAddProblem { return v.AddProblem }

// deleteFactsFromSourceResponse is returned by deleteFactsFromSource on success.
type deleteFactsFromSourceResponse struct {
	DeleteFactsFromSource string `json:"deleteFactsFromSource"`
}

// GetDeleteFactsFromSource returns deleteFactsFromSourceResponse.DeleteFactsFromSource, and is useful for accessing the field via an interface.
func (v *deleteFactsFromSourceResponse) GetDeleteFactsFromSource() string {
	return v.DeleteFactsFromSource
}

// deleteProblemsFromSourceResponse is returned by deleteProblemsFromSource on success.
type deleteProblemsFromSourceResponse struct {
	DeleteProblemsFromSource string `json:"deleteProblemsFromSource"`
}

// GetDeleteProblemsFromSource returns deleteProblemsFromSourceResponse.DeleteProblemsFromSource, and is useful for accessing the field via an interface.
func (v *deleteProblemsFromSourceResponse) GetDeleteProblemsFromSource() string {
	return v.DeleteProblemsFromSource
}

// getEnvironmentByNameEnvironmentByNameEnvironment includes the requested fields of the GraphQL type Environment.
// The GraphQL type's documentation follows.
//
// Lagoon Environment (for each branch, pullrequest there is an individual environment)
type getEnvironmentByNameEnvironmentByNameEnvironment struct {
	// Internal ID of this Environment
	Id int `json:"id"`
	// Name of this Environment
	Name string `json:"name"`
}

// GetId returns getEnvironmentByNameEnvironmentByNameEnvironment.Id, and is useful for accessing the field via an interface.
func (v *getEnvironmentByNameEnvironmentByNameEnvironment) GetId() int { return v.Id }

// GetName returns getEnvironmentByNameEnvironmentByNameEnvironment.Name, and is useful for accessing the field via an interface.
func (v *getEnvironmentByNameEnvironmentByNameEnvironment) GetName() string { return v.Name }

// getEnvironmentByNameResponse is returned by getEnvironmentByName on success.
type getEnvironmentByNameResponse struct {
	EnvironmentByName getEnvironmentByNameEnvironmentByNameEnvironment `json:"environmentByName"`
}

// GetEnvironmentByName returns getEnvironmentByNameResponse.EnvironmentByName, and is useful for accessing the field via an interface.
func (v *getEnvironmentByNameResponse) GetEnvironmentByName() getEnvironmentByNameEnvironmentByNameEnvironment {
	return v.EnvironmentByName
}

// getEnvironmentFromIdEnvironmentByIdEnvironment includes the requested fields of the GraphQL type Environment.
// The GraphQL type's documentation follows.
//
// Lagoon Environment (for each branch, pullrequest there is an individual environment)
type getEnvironmentFromIdEnvironmentByIdEnvironment struct {
	// Internal ID of this Environment
	Id int `json:"id"`
	// Name of this Environment
	Name string `json:"name"`
}

// GetId returns getEnvironmentFromIdEnvironmentByIdEnvironment.Id, and is useful for accessing the field via an interface.
func (v *getEnvironmentFromIdEnvironmentByIdEnvironment) GetId() int { return v.Id }

// GetName returns getEnvironmentFromIdEnvironmentByIdEnvironment.Name, and is useful for accessing the field via an interface.
func (v *getEnvironmentFromIdEnvironmentByIdEnvironment) GetName() string { return v.Name }

// getEnvironmentFromIdResponse is returned by getEnvironmentFromId on success.
type getEnvironmentFromIdResponse struct {
	EnvironmentById getEnvironmentFromIdEnvironmentByIdEnvironment `json:"environmentById"`
}

// GetEnvironmentById returns getEnvironmentFromIdResponse.EnvironmentById, and is useful for accessing the field via an interface.
func (v *getEnvironmentFromIdResponse) GetEnvironmentById() getEnvironmentFromIdEnvironmentByIdEnvironment {
	return v.EnvironmentById
}

// getProjectByNameProjectByNameProject includes the requested fields of the GraphQL type Project.
// The GraphQL type's documentation follows.
//
// Lagoon Project (like a git repository)
type getProjectByNameProjectByNameProject struct {
	// ID of project
	Id int `json:"id"`
	// Name of project
	Name string `json:"name"`
}

// GetId returns getProjectByNameProjectByNameProject.Id, and is useful for accessing the field via an interface.
func (v *getProjectByNameProjectByNameProject) GetId() int { return v.Id }

// GetName returns getProjectByNameProjectByNameProject.Name, and is useful for accessing the field via an interface.
func (v *getProjectByNameProjectByNameProject) GetName() string { return v.Name }

// getProjectByNameResponse is returned by getProjectByName on success.
type getProjectByNameResponse struct {
	// Returns Project Object by a given name
	ProjectByName getProjectByNameProjectByNameProject `json:"projectByName"`
}

// GetProjectByName returns getProjectByNameResponse.ProjectByName, and is useful for accessing the field via an interface.
func (v *getProjectByNameResponse) GetProjectByName() getProjectByNameProjectByNameProject {
	return v.ProjectByName
}

// The mutation executed by addFacts.
const addFacts_Operation = `
mutation addFacts ($facts: [AddFactInput]!) {
	addFacts(input: {facts:$facts}) {
		id
	}
}
`

func addFacts(
	ctx_ context.Context,
	client_ graphql.Client,
	facts []AddFactInput,
) (data_ *addFactsResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "addFacts",
		Query:  addFacts_Operation,
		Variables: &__addFactsInput{
			Facts: facts,
		},
	}

	data_ = &addFactsResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The mutation executed by addProblem.
const addProblem_Operation = `
mutation addProblem ($environment: Int!, $severity: ProblemSeverityRating, $severityScore: SeverityScore, $identifier: String!, $service: String!, $source: String!, $associatedPackage: String, $description: String, $links: String, $verstion: String, $fixedVersion: String, $dataString: String!) {
	addProblem(input: {environment:$environment,severity:$severity,severityScore:$severityScore,identifier:$identifier,service:$service,source:$source,associatedPackage:$associatedPackage,description:$description,links:$links,version:$verstion,fixedVersion:$fixedVersion,data:$dataString}) {
		id
	}
}
`

func addProblem(
	ctx_ context.Context,
	client_ graphql.Client,
	environment int,
	severity ProblemSeverityRating,
	severityScore float64,
	identifier string,
	service string,
	source string,
	associatedPackage string,
	description string,
	links string,
	verstion string,
	fixedVersion string,
	dataString string,
) (data_ *addProblemResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "addProblem",
		Query:  addProblem_Operation,
		Variables: &__addProblemInput{
			Environment:       environment,
			Severity:          severity,
			SeverityScore:     severityScore,
			Identifier:        identifier,
			Service:           service,
			Source:            source,
			AssociatedPackage: associatedPackage,
			Description:       description,
			Links:             links,
			Verstion:          verstion,
			FixedVersion:      fixedVersion,
			DataString:        dataString,
		},
	}

	data_ = &addProblemResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The mutation executed by deleteFactsFromSource.
const deleteFactsFromSource_Operation = `
mutation deleteFactsFromSource ($environment: Int!, $source: String!) {
	deleteFactsFromSource(input: {environment:$environment,source:$source})
}
`

func deleteFactsFromSource(
	ctx_ context.Context,
	client_ graphql.Client,
	environment int,
	source string,
) (data_ *deleteFactsFromSourceResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "deleteFactsFromSource",
		Query:  deleteFactsFromSource_Operation,
		Variables: &__deleteFactsFromSourceInput{
			Environment: environment,
			Source:      source,
		},
	}

	data_ = &deleteFactsFromSourceResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The mutation executed by deleteProblemsFromSource.
const deleteProblemsFromSource_Operation = `
mutation deleteProblemsFromSource ($environment: Int!, $source: String!, $service: String!) {
	deleteProblemsFromSource(input: {environment:$environment,source:$source,service:$service})
}
`

func deleteProblemsFromSource(
	ctx_ context.Context,
	client_ graphql.Client,
	environment int,
	source string,
	service string,
) (data_ *deleteProblemsFromSourceResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "deleteProblemsFromSource",
		Query:  deleteProblemsFromSource_Operation,
		Variables: &__deleteProblemsFromSourceInput{
			Environment: environment,
			Source:      source,
			Service:     service,
		},
	}

	data_ = &deleteProblemsFromSourceResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by getEnvironmentByName.
const getEnvironmentByName_Operation = `
query getEnvironmentByName ($name: String!, $project: Int!) {
	environmentByName(name: $name, project: $project) {
		id
		name
	}
}
`

func getEnvironmentByName(
	ctx_ context.Context,
	client_ graphql.Client,
	name string,
	project int,
) (data_ *getEnvironmentByNameResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "getEnvironmentByName",
		Query:  getEnvironmentByName_Operation,
		Variables: &__getEnvironmentByNameInput{
			Name:    name,
			Project: project,
		},
	}

	data_ = &getEnvironmentByNameResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by getEnvironmentFromId.
const getEnvironmentFromId_Operation = `
query getEnvironmentFromId ($environment: Int!) {
	environmentById(id: $environment) {
		id
		name
	}
}
`

func getEnvironmentFromId(
	ctx_ context.Context,
	client_ graphql.Client,
	environment int,
) (data_ *getEnvironmentFromIdResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "getEnvironmentFromId",
		Query:  getEnvironmentFromId_Operation,
		Variables: &__getEnvironmentFromIdInput{
			Environment: environment,
		},
	}

	data_ = &getEnvironmentFromIdResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by getProjectByName.
const getProjectByName_Operation = `
query getProjectByName ($project: String!) {
	projectByName(name: $project) {
		id
		name
	}
}
`

func getProjectByName(
	ctx_ context.Context,
	client_ graphql.Client,
	project string,
) (data_ *getProjectByNameResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "getProjectByName",
		Query:  getProjectByName_Operation,
		Variables: &__getProjectByNameInput{
			Project: project,
		},
	}

	data_ = &getProjectByNameResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}
