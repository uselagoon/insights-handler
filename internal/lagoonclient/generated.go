package lagoonclient

// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

import (
	"context"

	"github.com/Khan/genqlient/graphql"
)

type AddFactInput struct {
	Id          int      `json:"id"`
	Environment int      `json:"environment"`
	Name        string   `json:"name"`
	Value       string   `json:"value"`
	Source      string   `json:"source"`
	Service     string   `json:"service"`
	Description string   `json:"description"`
	KeyFact     bool     `json:"keyFact"`
	Type        FactType `json:"type"`
	Category    string   `json:"category"`
}

type FactType string

const (
	FactTypeText   FactType = "TEXT"
	FactTypeUrl    FactType = "URL"
	FactTypeSemver FactType = "SEMVER"
)

// __addFactsInput is used internally by genqlient
type __addFactsInput struct {
	Facts []AddFactInput `json:"facts"`
}

// __deleteFactsFromSourceInput is used internally by genqlient
type __deleteFactsFromSourceInput struct {
	Environment int    `json:"environment"`
	Source      string `json:"source"`
}

// __getEnvironmentByNameInput is used internally by genqlient
type __getEnvironmentByNameInput struct {
	Name    string `json:"name"`
	Project int    `json:"project"`
}

// __getEnvironmentFromIdInput is used internally by genqlient
type __getEnvironmentFromIdInput struct {
	Environment int `json:"environment"`
}

// __getProjectByNameInput is used internally by genqlient
type __getProjectByNameInput struct {
	Project string `json:"project"`
}

// addFactsAddFactsFact includes the requested fields of the GraphQL type Fact.
type addFactsAddFactsFact struct {
	Id int `json:"id"`
}

// addFactsResponse is returned by addFacts on success.
type addFactsResponse struct {
	AddFacts []addFactsAddFactsFact `json:"addFacts"`
}

// deleteFactsFromSourceResponse is returned by deleteFactsFromSource on success.
type deleteFactsFromSourceResponse struct {
	DeleteFactsFromSource string `json:"deleteFactsFromSource"`
}

// getEnvironmentByNameEnvironmentByNameEnvironment includes the requested fields of the GraphQL type Environment.
// The GraphQL type's documentation follows.
//
// Lagoon Environment (for each branch, pullrequest there is an individual environment)
type getEnvironmentByNameEnvironmentByNameEnvironment struct {
	// Internal ID of this Environment
	Id int `json:"id"`
	// Name of this Environment
	Name string `json:"name"`
}

// getEnvironmentByNameResponse is returned by getEnvironmentByName on success.
type getEnvironmentByNameResponse struct {
	EnvironmentByName getEnvironmentByNameEnvironmentByNameEnvironment `json:"environmentByName"`
}

// getEnvironmentFromIdEnvironmentByIdEnvironment includes the requested fields of the GraphQL type Environment.
// The GraphQL type's documentation follows.
//
// Lagoon Environment (for each branch, pullrequest there is an individual environment)
type getEnvironmentFromIdEnvironmentByIdEnvironment struct {
	// Internal ID of this Environment
	Id int `json:"id"`
	// Name of this Environment
	Name string `json:"name"`
}

// getEnvironmentFromIdResponse is returned by getEnvironmentFromId on success.
type getEnvironmentFromIdResponse struct {
	EnvironmentById getEnvironmentFromIdEnvironmentByIdEnvironment `json:"environmentById"`
}

// getProjectByNameProjectByNameProject includes the requested fields of the GraphQL type Project.
// The GraphQL type's documentation follows.
//
// Lagoon Project (like a git repository)
type getProjectByNameProjectByNameProject struct {
	// ID of project
	Id int `json:"id"`
	// Name of project
	Name string `json:"name"`
}

// getProjectByNameResponse is returned by getProjectByName on success.
type getProjectByNameResponse struct {
	// Returns Project Object by a given name
	ProjectByName getProjectByNameProjectByNameProject `json:"projectByName"`
}

func getProjectByName(
	ctx context.Context,
	client graphql.Client,
	project string,
) (*getProjectByNameResponse, error) {
	__input := __getProjectByNameInput{
		Project: project,
	}
	var err error

	var retval getProjectByNameResponse
	err = client.MakeRequest(
		ctx,
		"getProjectByName",
		`
query getProjectByName ($project: String!) {
	projectByName(name: $project) {
		id
		name
	}
}
`,
		&retval,
		&__input,
	)
	return &retval, err
}

func getEnvironmentByName(
	ctx context.Context,
	client graphql.Client,
	name string,
	project int,
) (*getEnvironmentByNameResponse, error) {
	__input := __getEnvironmentByNameInput{
		Name:    name,
		Project: project,
	}
	var err error

	var retval getEnvironmentByNameResponse
	err = client.MakeRequest(
		ctx,
		"getEnvironmentByName",
		`
query getEnvironmentByName ($name: String!, $project: Int!) {
	environmentByName(name: $name, project: $project) {
		id
		name
	}
}
`,
		&retval,
		&__input,
	)
	return &retval, err
}

func getEnvironmentFromId(
	ctx context.Context,
	client graphql.Client,
	environment int,
) (*getEnvironmentFromIdResponse, error) {
	__input := __getEnvironmentFromIdInput{
		Environment: environment,
	}
	var err error

	var retval getEnvironmentFromIdResponse
	err = client.MakeRequest(
		ctx,
		"getEnvironmentFromId",
		`
query getEnvironmentFromId ($environment: Int!) {
	environmentById(id: $environment) {
		id
		name
	}
}
`,
		&retval,
		&__input,
	)
	return &retval, err
}

func addFacts(
	ctx context.Context,
	client graphql.Client,
	facts []AddFactInput,
) (*addFactsResponse, error) {
	__input := __addFactsInput{
		Facts: facts,
	}
	var err error

	var retval addFactsResponse
	err = client.MakeRequest(
		ctx,
		"addFacts",
		`
mutation addFacts ($facts: [AddFactInput]!) {
	addFacts(input: {facts:$facts}) {
		id
	}
}
`,
		&retval,
		&__input,
	)
	return &retval, err
}

func deleteFactsFromSource(
	ctx context.Context,
	client graphql.Client,
	environment int,
	source string,
) (*deleteFactsFromSourceResponse, error) {
	__input := __deleteFactsFromSourceInput{
		Environment: environment,
		Source:      source,
	}
	var err error

	var retval deleteFactsFromSourceResponse
	err = client.MakeRequest(
		ctx,
		"deleteFactsFromSource",
		`
mutation deleteFactsFromSource ($environment: Int!, $source: String!) {
	deleteFactsFromSource(input: {environment:$environment,source:$source})
}
`,
		&retval,
		&__input,
	)
	return &retval, err
}
